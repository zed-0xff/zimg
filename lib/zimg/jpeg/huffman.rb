# -*- coding:binary; frozen_string_literal: true -*-

# based on https://github.com/jpeg-js/jpeg-js

module ZIMG
  module JPEG
    class Huffman
      def initialize(lengths, values)
        raise "expected 16 lengths, got #{lengths.size}" if lengths.size != 16

        @root = self.class.build_table(lengths, values)
      end

      # https://hg.mozilla.org/mozilla-central/rev/fac849dd7be9#l3.62
      def self.default_tables
        {
          # dc luminance
          0x00 => new(
            [0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
          ),
          # dc chrominance
          0x01 => new(
            [0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
          ),
          # ac luminance
          0x10 => new(
            [0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d],
            [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
             0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
             0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
             0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
             0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
             0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
             0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
             0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
             0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
             0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
             0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
             0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
             0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
             0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
             0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
             0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
             0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
             0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
             0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
             0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
             0xf9, 0xfa]
          ),
          # ac chrominance
          0x11 => new(
            [0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77],
            [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
             0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
             0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
             0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
             0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
             0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
             0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
             0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
             0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
             0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
             0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
             0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
             0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
             0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
             0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
             0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
             0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
             0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
             0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
             0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
             0xf9, 0xfa]
          ),
        }
      end

      # input: IO, supporting individual bits reading
      # output: byte
      def decode(bit_io)
        node = @root
        while (bit = bit_io.next)
          node = node[bit]
          return node if node.is_a?(Integer)
          raise "invalid huffman sequence" unless node.is_a?(Array)
        end
        nil
      end

      def decode_debug(bit_io)
        node = @root
        a = []
        while (bit = bit_io.next)
          a << bit
          node = node[bit]
          if node.is_a?(Integer)
            puts "[d] #{a} => #{node}"
            return node
          end
          unless node.is_a?(Array)
            puts "[d] #{a}"
            raise "invalid huffman sequence"
          end
        end
        nil
      end

      def self.build_table(lengths, values)
        k = 0
        code = []
        length = 16
        length -= 1 while length > 0 && !lengths[length - 1]
        code.push({ children: [], index: 0 })
        p = code[0]
        length.times do |i|
          lengths[i].times do |_j|
            p = code.pop
            p[:children][p[:index]] = values[k]
            while p[:index] > 0
              raise "Could not recreate Huffman Table" if code.empty?

              p = code.pop
            end
            p[:index] += 1
            code.push(p)
            while code.length <= i
              code.push(q = { children: [], index: 0 })
              p[:children][p[:index]] = q[:children]
              p = q
            end
            k += 1
          end
          next unless i + 1 < length

          # p here points to last code
          code.push(q = { children: [], index: 0 })
          p[:children][p[:index]] = q[:children]
          p = q
        end
        code[0][:children]
      end
    end
  end
end
