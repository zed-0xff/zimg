# frozen_string_literal: true

ASCII_MODIFIED_QR = <<~EOQR
  .#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.
  .#######.##.....##.#.##....#######.
  .#.....#.......##.#.##.....#.....#.
  .#.###.#.#..#####..#.#..##.#.###.#.
  .#.###.#.##.#....#.####.##.#.###.#.
  .#.###.#.####.#....#.####..#.###.#.
  .#.....#..#..#.#..#####....#.....#.
  .#######.#.#.#.#.#.#.#.#.#.#######.
  ..........#.#.##.....##.##.........
  .####..#.#....##.#.##....##..###.#.
  ..#.##...##.....##.#.##.#.###...##.
  .#.###.##......##.#.##..##.#.###.#.
  ....###.#...#####..#.#...##.#...#..
  .##.##.#..#.#....#.####..##.##.....
  ...#..#.##.##.#....#.###.##....##..
  .#.######.##.#.#..#####..#######...
  .#.####..###.##.#.##....#...##.#...
  ...##.##..###.....##.#.##.########.
  .....#..###..##.....##.#########.#.
  .####.#####.##.....##.#...#...#.#..
  ..##.#..#..#.#..#####..#.#..##...#.
  ...######.#####.#....#.##......#...
  ..###.....#..####.#....###.#...###.
  .###..####.####..#.#..#######...##.
  .#.#.##.##.#.....##.#.##.######.#..
  ..#.#######..#.##.....##.#####...#.
  .........#.###.#.##.....##...#.#...
  .#######....#.#.##.....###.#.#.....
  .#.....#..###..#.#..######...###.#.
  .#.###.#.....#.####.#...########...
  .#.###.#.###...#.####.#.#.#........
  .#.###.#.###..#####..#.##..#..#....
  .#.....#.####.##.....##.###......#.
  .#######.#.#..##.#.##...#.##...#...
  ...................................
EOQR

RSpec.describe "ZIMG modify" do
  each_sample("png/qr_*.png") do |fname|
    describe fname.sub("#{File.dirname(PNG_SAMPLES_DIR)}/", "") do
      img = ZIMG.load(fname)
      it "modifies img - color=#{img.hdr.color}, depth=#{img.hdr.depth}, bpp=#{img.hdr.bpp}" do
        img.width.times do |x|
          img[x, 0] = x.even? ? ZIMG::Color::WHITE : ZIMG::Color::BLACK
        end
        expect(img.to_ascii("#.").strip).to eq ASCII_MODIFIED_QR.strip
      end
    end
  end
end
